From 32f9f6919206f7385a66d711f9644aaacf533181 Mon Sep 17 00:00:00 2001
From: Clayton Craft <clayton@craftyguy.net>
Date: Tue, 7 Jan 2025 20:21:29 -0800
Subject: [PATCH 2/2] fix wchar for compiling on musl

---
 src/boot/efi-string.c | 10 +++++-----
 src/boot/efi.h        |  5 +----
 2 files changed, 6 insertions(+), 9 deletions(-)

diff --git a/src/boot/efi-string.c b/src/boot/efi-string.c
index aee98a81e1..314d14d3e5 100644
--- a/src/boot/efi-string.c
+++ b/src/boot/efi-string.c
@@ -570,7 +570,7 @@ typedef struct {
         bool have_field_width;
 
         const char *str;
-        const wchar_t *wstr;
+        const uint16_t *wstr;
 
         /* For numbers. */
         bool is_signed;
@@ -631,7 +631,7 @@ static bool push_str(FormatContext *ctx, SpecifierContext *sp) {
                 push_padding(ctx, ' ', sp->padded_len);
 
         /* In userspace unit tests we cannot just memcpy() the wide string. */
-        if (sp->wstr && sizeof(wchar_t) == sizeof(char16_t)) {
+        if (sp->wstr && sizeof(uint16_t) == sizeof(char16_t)) {
                 memcpy(ctx->buf + ctx->n, sp->wstr, sp->len * sizeof(*sp->wstr));
                 ctx->n += sp->len;
         } else {
@@ -725,7 +725,7 @@ static bool handle_format_specifier(FormatContext *ctx, SpecifierContext *sp) {
          * int in vararg functions, which is why we fetch only ints for any such types. The compiler would
          * otherwise warn about fetching smaller types. */
         assert_cc(sizeof(int) == 4);
-        assert_cc(sizeof(wchar_t) <= sizeof(int));
+        assert_cc(sizeof(uint16_t) <= sizeof(int));
         assert_cc(sizeof(intmax_t) <= sizeof(long long));
 
         assert(ctx);
@@ -820,13 +820,13 @@ static bool handle_format_specifier(FormatContext *ctx, SpecifierContext *sp) {
                 return push_str(ctx, sp);
 
         case 'c':
-                sp->wstr = &(wchar_t){ va_arg(ctx->ap, int) };
+                sp->wstr = &(uint16_t){ va_arg(ctx->ap, int) };
                 sp->len = 1;
                 return push_str(ctx, sp);
 
         case 's':
                 if (sp->long_arg) {
-                        sp->wstr = va_arg(ctx->ap, const wchar_t *) ?: L"(null)";
+                        sp->wstr = va_arg(ctx->ap, const uint16_t *) ?: L"(null)";
                         sp->len = wcsnlen(sp->wstr, sp->len);
                 } else {
                         sp->str = va_arg(ctx->ap, const char *) ?: "(null)";
diff --git a/src/boot/efi.h b/src/boot/efi.h
index e1042635b9..1c191d49e7 100644
--- a/src/boot/efi.h
+++ b/src/boot/efi.h
@@ -10,7 +10,7 @@
 
 #if SD_BOOT
 /* uchar.h/wchar.h are not suitable for freestanding environments. */
-typedef __WCHAR_TYPE__ wchar_t;
+typedef __WCHAR_TYPE__ uint16_t;
 typedef __CHAR16_TYPE__ char16_t;
 typedef __CHAR32_TYPE__ char32_t;
 
@@ -22,7 +22,6 @@ assert_cc(sizeof(uint8_t) == 1);
 assert_cc(sizeof(uint16_t) == 2);
 assert_cc(sizeof(uint32_t) == 4);
 assert_cc(sizeof(uint64_t) == 8);
-assert_cc(sizeof(wchar_t) == 2);
 assert_cc(sizeof(char16_t) == 2);
 assert_cc(sizeof(char32_t) == 4);
 assert_cc(sizeof(size_t) == sizeof(void *));
@@ -32,7 +31,6 @@ assert_cc(alignof(uint8_t) == 1);
 assert_cc(alignof(uint16_t) == 2);
 assert_cc(alignof(uint32_t) == 4);
 assert_cc(alignof(uint64_t) == 8);
-assert_cc(alignof(wchar_t) == 2);
 assert_cc(alignof(char16_t) == 2);
 assert_cc(alignof(char32_t) == 4);
 
@@ -41,7 +39,6 @@ assert_cc(alignof(char32_t) == 4);
 #  endif
 #else
 #  include <uchar.h>
-#  include <wchar.h>
 #endif
 
 /* We use size_t/ssize_t to represent UEFI UINTN/INTN. */
-- 
2.47.1

